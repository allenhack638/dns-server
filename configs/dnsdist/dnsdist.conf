setTCPRecvTimeout(30) 
setTCPSendTimeout(30)
setVerbose(true)

newServer({
  address="172.20.0.10:53",
  name="pihole", 
  healthCheckMode='lazy', 
  checkInterval=1, 
  lazyHealthCheckFailedInterval=30, 
  rise=2, 
  maxCheckFailures=3, 
  lazyHealthCheckThreshold=30, 
  lazyHealthCheckSampleSize=100,  
  lazyHealthCheckMinSampleCount=10, 
  lazyHealthCheckMode='TimeoutOnly'
})

setACL({"0.0.0.0/0", "::/0"})

function getCaddyCertPath(domain)
  -- Correct path matching Caddy's actual certificate structure
  local certDir = "/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/" .. domain .. "/"
  return {
    cert = certDir .. domain .. ".crt",
    key = certDir .. domain .. ".key"
  }
end

local certs = getCaddyCertPath(os.getenv("DOMAIN_DNS"))

-- Debug: Print certificate paths
print("Looking for certificate at: " .. certs.cert)
print("Looking for key at: " .. certs.key)

-- Check if files exist before trying to load them
local cert_file = io.open(certs.cert, "r")
local key_file = io.open(certs.key, "r")

if cert_file and key_file then
  cert_file:close()
  key_file:close()
  print("Certificate files found, setting up DoH and DoT")
  
  addDOHLocal("0.0.0.0:443", certs.cert, certs.key, "/dns-query")
  addTLSLocal("0.0.0.0:853", certs.cert, certs.key)
  addTLSLocal("[::]:853", certs.cert, certs.key)
else
  print("Certificate files not found!")
  if cert_file then cert_file:close() end
  if key_file then key_file:close() end
  
  -- Fall back to plain DNS only
  print("Falling back to plain DNS only")
end

addLocal("0.0.0.0:53")
addLocal("[::]:53")

addAction(AllRule(), LogAction("/dev/stdout", false, false, true, false, false))

function healthCheck()
  return "OK"
end