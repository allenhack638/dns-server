version: "3.8"

services:
  # Pi-hole - DNS filtering and ad blocking
  pihole:
    image: pihole/pihole:latest
    container_name: dns-pihole
    hostname: pihole
    environment:
      - TZ=${TZ}
      - WEBPASSWORD=${WEBPASSWORD}
    volumes:
      - ./data/pihole:/etc/pihole
      - ./data/dnsmasq.d:/etc/dnsmasq.d
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "dig", "@127.0.0.1", "google.com"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      dns-network:
        ipv4_address: 172.20.0.10

  # Caddy - Reverse proxy for DoH and Dashboard with Auto SSL
  caddy:
    image: caddy:latest
    container_name: dns-caddy
    hostname: caddy
    environment:
      - DOMAIN_DNS=${DOMAIN_DNS}
      - DOMAIN_DASHBOARD=${DOMAIN_DASHBOARD}
    volumes:
      - ./configs/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./data/caddy-data:/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "caddy", "validate", "--config", "/etc/caddy/Caddyfile"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      dns-network:
        ipv4_address: 172.20.0.12
    depends_on:
      pihole:
        condition: service_healthy

  # Certificate copier - copies certs with proper permissions
  cert-copier:
    image: busybox:1.36-musl
    container_name: dns-cert-copier
    volumes:
      - ./data/caddy-data:/caddy-data:ro
      - ./data/shared-certs:/shared-certs
    environment:
      - DOMAIN_DNS=${DOMAIN_DNS}
    entrypoint: ["/bin/sh"]
    command:
      - -c
      - |
        echo "Setting up weekly certificate copier for domain: $$DOMAIN_DNS"

        # Create the certificate copy script
        cat > /copy-certs.sh << 'SCRIPT_END'
        #!/bin/sh
        CERT_PATH="/caddy-data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/$DOMAIN_DNS/$DOMAIN_DNS.crt"
        KEY_PATH="/caddy-data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/$DOMAIN_DNS/$DOMAIN_DNS.key"

        echo "$(date): Starting certificate check..."

        if [ -f "$CERT_PATH" ] && [ -f "$KEY_PATH" ]; then
          NEED_COPY=0
          
          if [ ! -f "/shared-certs/dns.crt" ] || [ ! -f "/shared-certs/dns.key" ]; then
            NEED_COPY=1
            echo "$(date): Initial certificate copy needed"
          elif [ "$CERT_PATH" -nt "/shared-certs/dns.crt" ] || [ "$KEY_PATH" -nt "/shared-certs/dns.key" ]; then
            NEED_COPY=1
            echo "$(date): Certificate renewal detected - copying updated certificates"
          fi
          
          if [ $NEED_COPY -eq 1 ]; then
            mkdir -p /shared-certs
            cp "$CERT_PATH" /shared-certs/dns.crt
            cp "$KEY_PATH" /shared-certs/dns.key
            chmod 644 /shared-certs/dns.crt /shared-certs/dns.key
            echo "$(date): Certificates copied successfully"
          else
            echo "$(date): Certificates are up to date"
          fi
        else
          echo "$(date): Certificate files not found"
          echo "  Checked: $CERT_PATH"
          echo "  Checked: $KEY_PATH"
        fi

        echo "$(date): Certificate check completed"
        SCRIPT_END

        chmod +x /copy-certs.sh

        # Set up weekly cron (Sunday 3 AM)
        echo '0 3 * * 0 /copy-certs.sh >> /shared-certs/cert-copy.log 2>&1' > /var/spool/cron/crontabs/root

        # Run initial copy
        echo "Running initial certificate copy..."
        /copy-certs.sh

        # Start cron daemon
        echo "Starting cron daemon for weekly certificate checks..."
        echo "Schedule: Every Sunday at 3:00 AM"
        crond -f -l 2
    restart: unless-stopped
    depends_on:
      caddy:
        condition: service_healthy
    networks:
      dns-network:
        ipv4_address: 172.20.0.14

  # dnsdist - DNS proxy for DoT and DoH backend
  dnsdist:
    image: powerdns/dnsdist-19:1.9.6
    container_name: dns-dnsdist
    hostname: dnsdist
    volumes:
      - ./configs/dnsdist/dnsdist.conf:/etc/dnsdist/dnsdist.conf:ro
      - ./data/shared-certs:/shared-certs:ro
    environment:
      - DOMAIN_DNS=${DOMAIN_DNS}
    entrypoint: ["/bin/sh", "-c"]
    command: ["dnsdist --config /etc/dnsdist/dnsdist.conf --supervised"]
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "853:853/tcp"
    restart: unless-stopped
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "dig", "@127.0.0.1", "google.com"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      dns-network:
        ipv4_address: 172.20.0.11
    depends_on:
      pihole:
        condition: service_healthy
      cert-copier:
        condition: service_started

networks:
  dns-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
